/*********************************************************************************
   *********************************************************************************
  **  Author: Pancho Dachkinov, Dondogjamts Batbaatar          ||  //  || ======= ***
 ***  Version: V1.0                                            ||_//   ||    +    ****
 ***  Date: 2018:10:10                                         || \\   ||    +    ****
  **  Name of the project: Emotional Expressive Robot "Emo san"||  \\  ||    +    ***
  *********************************************************************************
***********************************************************************************/
#include <Wire.h>

#define xdeg 0.00 //x+-30.882425
#define ydeg 0.00 //y+-32.4
#define zdeg 0.00 //z-40 +25
//if you want to set rotational input by radian limits are: //minz=-0.7440  maxz 0.3720  //xmax min 0.539 -0.539  ymax0.5655
#define NumofRotation 3
#define NumofBending  3
#define NumofSwing    3

//Experiment parameters of 3 axis imported from Matlab.
double  L1_Z[]={212.125779289091,  212.159827325178,  212.216331064613,  212.295199664006,  212.396306452175,  212.519489260752,  212.664550845664,  212.831259397124,  213.019349135271,  213.228520988164,  213.458443348441,  213.708752904538,  213.979055542104,  214.268927310890,  214.577915452218,  214.905539481885,  215.251292323263,  215.614641485220,  215.995030279456,  216.391879071826,  216.804586562268,  217.232531088019,  217.675071944914,  218.131550721707,  218.601292642529,  219.083607912803,  219.577793064140,  220.083132294023,  220.598898796297,  221.124356078792,  221.658759264676};
double  L2_Z[]={221.658759264676,  221.124356078792,  220.598898796297,  220.083132294023,  219.577793064140,  219.083607912803,  218.601292642529,  218.131550721707,  217.675071944914,  217.232531088019,  216.804586562268,  216.391879071826,  215.995030279456,  215.614641485220,  215.251292323263,  214.905539481885,  214.577915452218,  214.268927310890,  213.979055542104,  213.708752904538,  213.458443348441,  213.228520988164,  213.019349135271,  212.831259397124,  212.664550845664,  212.519489260752,  212.396306452175,  212.295199664006,  212.216331064613,  212.159827325178,  212.125779289091};
double  L3_Z[]={212.124769476418,  212.158781899135,  212.215240999507,  212.294056012988,  212.395100364238,  212.518211997405,  212.663193797232,  212.829814098608,  213.017807281723,  213.226874449523,  213.456684183776,  213.706873375677,  213.977048126578,  214.266784714198,  214.575630619346,  214.903105608086,  215.248702864060,  215.611890165628,  215.992111102407,  216.388786325795,  216.801314828100,  217.229075244960,  217.671427175852,  218.127712517633,  218.597256806240,  219.079370561853,  219.573350633072,  220.078481535890,  220.594036783514,  221.119280203332,  221.653467237644};
double  L4_Z[]={221.658759264676,  221.124356078792,  220.598898796297,  220.083132294023,  219.577793064140,  219.083607912803,  218.601292642529,  218.131550721707,  217.675071944914,  217.232531088019,  216.804586562268,  216.391879071826,  215.995030279456,  215.614641485220,  215.251292323263,  214.905539481885,  214.577915452218,  214.268927310890,  213.979055542104,  213.708752904538,  213.458443348441,  213.228520988164,  213.019349135271,  212.831259397124,  212.664550845664,  212.519489260752,  212.396306452175,  212.295199664006,  212.216331064613,  212.159827325178,  212.125779289091};
double  L5_Z[]={212.124769476418,  212.158781899135,  212.215240999507,  212.294056012988,  212.395100364238,  212.518211997405,  212.663193797232,  212.829814098608,  213.017807281723,  213.226874449523,  213.456684183776,  213.706873375677,  213.977048126578,  214.266784714198,  214.575630619346,  214.903105608086,  215.248702864060,  215.611890165628,  215.992111102407,  216.388786325795,  216.801314828100,  217.229075244960,  217.671427175852,  218.127712517633,  218.597256806240,  219.079370561853,  219.573350633072,  220.078481535890,  220.594036783514,  221.119280203332,  221.653467237644};
double  L6_Z[]={221.658759264676,  221.124356078792,  220.598898796297,  220.083132294023,  219.577793064140,  219.083607912803,  218.601292642529,  218.131550721707,  217.675071944914,  217.232531088019,  216.804586562268,  216.391879071826,  215.995030279456,  215.614641485220,  215.251292323263,  214.905539481885,  214.577915452218,  214.268927310890,  213.979055542104,  213.708752904538,  213.458443348441,  213.228520988164,  213.019349135271,  212.831259397124,  212.664550845664,  212.519489260752,  212.396306452175,  212.295199664006,  212.216331064613,  212.159827325178,  212.125779289091};

double  L1_Y[]={197.484644107606,  198.552171237632,  199.641182481733,  200.749793339604,  201.876118568814,  203.018276145335,  204.174390963877,  205.342598280081,  206.521046898845,  207.707902114948,  208.901348413701,  210.099591940629,  211.300862750194,  212.503416844332,  213.705538012073,  214.905539481885,  216.101765398489,  217.292592135935,  218.476429458567,  219.651721541287,  220.816947860209,  221.970623964386,  223.111302138869,  224.237571968839,  225.348060814091,  226.441434202557,  227.516396151081,  228.571689421077,  229.606095716203,  230.618435828639,  231.607569740099};
double  L2_Y[]={231.607569740099,  230.618435828639,  229.606095716203,  228.571689421077,  227.516396151081,  226.441434202557,  225.348060814091,  224.237571968839,  223.111302138869,  221.970623964386,  220.816947860209,  219.651721541287,  218.476429458567,  217.292592135935,  216.101765398489,  214.905539481885,  213.705538012073,  212.503416844332,  211.300862750194,  210.099591940629,  208.901348413701,  207.707902114948,  206.521046898845,  205.342598280081,  204.174390963877,  203.018276145335,  201.876118568814,  200.749793339604,  199.641182481733,  198.552171237632,  197.484644107606};
double  L3_Y[]={240.205672596423,  238.615358357206,  237.002450011572,  235.368798977851,  233.716316442329,  232.046973732225,  230.362802599463,  228.665895397862,  226.958405134493,  225.242545373936,  223.520589972116,  221.794872614253,  220.067786129260,  218.341781550826,  216.619366893242,  214.903105608086,  213.195614686046,  211.499562366609,  209.817665417152,  208.152685942236,  206.507427683751,  204.884731773103,  203.287471898039,  201.718548849074,  200.180884414000,  198.677414593701,  197.211082118672,  195.784828253241,  194.401583883713,  193.064259897394,  191.775736871796};
double  L4_Y[]={222.672074350126,  222.174557637453,  221.671051598096,  221.162233330605,  220.648791694913,  220.131426569927,  219.610848075302,  219.087775756777,  218.562937734576,  218.037069814489,  217.510914561393,  216.985220335100,  216.460740288632,  215.938231329134,  215.418453041904,  214.902166578190,  214.390133507639,  213.883114636537,  213.381868793226,  212.887151582352,  212.399714109886,  211.920301681144,  211.449652474317,  210.988496192356,  210.537552696320,  210.097530623622,  209.669125994906,  209.253020813578,  208.849881662278,  208.460358300879,  208.085082270813};
double  L5_Y[]={208.085082270813,  208.460358300879,  208.849881662278,  209.253020813578,  209.669125994906,  210.097530623622,  210.537552696320,  210.988496192356,  211.449652474317,  211.920301681144,  212.399714109886,  212.887151582352,  213.381868793226,  213.883114636537,  214.390133507639,  214.902166578190,  215.418453041904,  215.938231329134,  216.460740288632,  216.985220335100,  217.510914561393,  218.037069814489,  218.562937734576,  219.087775756777,  219.610848075302,  220.131426569927,  220.648791694913,  221.162233330605,  221.671051598096,  222.174557637453,  222.672074350126};
double  L6_Y[]={191.775736871796,  193.064259897394,  194.401583883713,  195.784828253241,  197.211082118672,  198.677414593701,  200.180884414000,  201.718548849074,  203.287471898039,  204.884731773103,  206.507427683751,  208.152685942236,  209.817665417152,  211.499562366609,  213.195614686046,  214.903105608086,  216.619366893242,  218.341781550826,  220.067786129260,  221.794872614253,  223.520589972116,  225.242545373936,  226.958405134493,  228.665895397862,  230.362802599463,  232.046973732225,  233.716316442329,  235.368798977851,  237.002450011572,  238.615358357206,  240.205672596423};
double vec_y[]={-0.565500000000000,  -0.527800000000000,  -0.490100000000000,  -0.452400000000000,  -0.414700000000000,  -0.377000000000000,  -0.339300000000000,  -0.301600000000000,  -0.263900000000000,  -0.226200000000000,  -0.188500000000000,  -0.150800000000000,  -0.113100000000000,  -0.0754000000000000,  -0.0377000000000001,  0,  0.0377000000000000,  0.0754000000000000,  0.113100000000000,  0.150800000000000,  0.188500000000000,  0.226200000000000,  0.263900000000000,  0.301600000000000,  0.339300000000000,  0.377000000000000,  0.414700000000000,  0.452400000000000,  0.490100000000000,  0.527800000000000,  0.565500000000000};

double  L1_X[]={233.375406824802,  232.189375319580,  230.990561873347,  229.780326367741,  228.560062338191,  227.331196481773,  226.095188077189,  224.853528308432,  223.607739483254,  222.359374137222,  221.110014013778,  219.861268910469,  218.614775381315,  217.372195285148,  216.135214169773,  214.905539481885,  213.684898592968,  212.475036631769,  211.277714114587,  210.094704365372,  208.927790718681,  207.778763499756,  206.649416777545,  205.541544888205,  204.456938728714,  203.397381822525,  202.364646161781,  201.360487833468,  200.386642439992,  199.444820327960,  198.536701642432};
double  L2_X[]={233.375406824802,  232.189375319580,  230.990561873347,  229.780326367741,  228.560062338191,  227.331196481773,  226.095188077189,  224.853528308432,  223.607739483254,  222.359374137222,  221.110014013778,  219.861268910469,  218.614775381315,  217.372195285148,  216.135214169773,  214.905539481885,  213.684898592968,  212.475036631769,  211.277714114587,  210.094704365372,  208.927790718681,  207.778763499756,  206.649416777545,  205.541544888205,  204.456938728714,  203.397381822525,  202.364646161781,  201.360487833468,  200.386642439992,  199.444820327960,  198.536701642432};
double  L3_X[]={220.031305537814,  219.735356528810,  219.431158378711,  219.119070303241,  218.799462343036,  218.472715049248,  218.139219153588,  217.799375222431,  217.453593294711,  217.102292503252,  216.745900679293,  216.384853939910,  216.019596258129,  215.650579015502,  215.278260537002,  214.903105608086,  214.525584973865,  214.146174820334,  213.765356237684,  213.383614665783,  213.001439321966,  212.619322611347,  212.237759519938,  211.857246990947,  211.478283284697,  211.101367322702,  210.726998016537,  210.355673582206,  209.987890840854,  209.624144506723,  209.264926463393};
double  L4_X[]={192.337115708511,  193.673105582909,  195.043717032577,  196.446474666260,  197.878903326714,  199.338534216402,  200.822910511031,  202.329592470553,  203.856162062132,  205.400227113491,  206.959425018156,  208.531426016440,  210.113936077595,  211.704699409574,  213.301500623276,  214.902166578190,  216.504567935935,  218.106620447549,  219.706285999419,  221.301573441670,  222.890539221562,  224.471287843107,  226.041972172763,  227.600793609598,  229.146002136975,  230.675896271361,  232.188822922590,  233.683177178565,  235.157402026192,  236.609988019190,  238.039472902291};
double  L5_X[]={192.337115708511,  193.673105582909,  195.043717032577,  196.446474666260,  197.878903326714,  199.338534216402,  200.822910511031,  202.329592470553,  203.856162062132,  205.400227113491,  206.959425018156,  208.531426016440,  210.113936077595,  211.704699409574,  213.301500623276,  214.902166578190,  216.504567935935,  218.106620447549,  219.706285999419,  221.301573441670,  222.890539221562,  224.471287843107,  226.041972172763,  227.600793609598,  229.146002136975,  230.675896271361,  232.188822922590,  233.683177178565,  235.157402026192,  236.609988019190,  238.039472902291};
double  L6_X[]={220.031305537814,  219.735356528810,  219.431158378711,  219.119070303241,  218.799462343036,  218.472715049248,  218.139219153588,  217.799375222431,  217.453593294711,  217.102292503252,  216.745900679293,  216.384853939910,  216.019596258129,  215.650579015502,  215.278260537002,  214.903105608086,  214.525584973865,  214.146174820334,  213.765356237684,  213.383614665783,  213.001439321966,  212.619322611347,  212.237759519938,  211.857246990947,  211.478283284697,  211.101367322702,  210.726998016537,  210.355673582206,  209.987890840854,  209.624144506723,  209.264926463393};

#define SERVOMIN  180 // this is the 'minimum' pulse length count (out of 4096)
#define SERVOMAX  365 // this is the 'maximum' pulse length count 

#define LMIN  191
#define LMAX  240

#define PCA9685_MODE1 0x0
#define PCA9685_PRESCALE 0xFE

#define LED0_ON_L 0x6
#define LED0_ON_H 0x7
#define LED0_OFF_L 0x8
#define LED0_OFF_H 0x9
#define MOTION_Step 31
#define NewAddress  0x40
#define Square 2

const float pi = 3.14159265359;
//******************************KINEMATICS************************************************//

//Points on the Base
double a1[]={13.5, 76.4,   0};
double a2[]={-13.5, 76.4,  0};
double a3[]={-72.9, -26.5, 0};
double a4[]={-59.4, -49.88,0};
double a5[]={59.4, -49.88, 0};
double a6[]={72.9, -26.5,  0};

//Points on the top
double b1[]={32.53, 34.9,0};
double b2[]={-32.53, 34.9, 0};
double b3[]={-46.48,10.72,0};
double b4[]={-13.96, -45.62,0};
double b5[]={13.96, -45.62, 0};
double b6[]={46.48, 10.72, 0};

double L1=0.00;
double L2=0.00;
double L3=0.00;
double L4=0.00;
double L5=0.00;
double L6=0.00;

double P[]={0,0,210}; // 160 min 214.3055 middle position
double R[3][3]={};

void kinematics(double x,double y, double z)
{
  double  Rz[3][3]={
                    {cos(z),   -sin(z),   0}, 
                    {sin(z),   cos(z),   0}, 
                    {0,         0,       1}
                   };

  double  Ry[3][3]={
                    {cos(y),   0,   sin(y)}, 
                    {0,        1,        0},
                    {-sin(y),  0,   cos(y)}
                   };
  double  Rx[3][3]={
                    {1,     0,          0}, 
                    {0,    cos(x),  -sin(x)}, 
                    {0,    sin(x),  cos(x)}
                   };
//      for (int i = 0; i < 3; i++) {
//        for (int j = 0; j < 3; j++) {
//            R[i][j]=Rz[i]*Ry[j]; //*Rx[i][j];
//          }}
//R[3][3]=Rx[0][0]*Rx[0][1]*Rx[0][2]
//  
//Rx =[ Rx[0][0], Rx[0][1], Rx[0][2]]
//    [ Rx[1][0], Rx[1][1], Rx[1][2]]
//    [ Rx[2][0], Rx[2][1], Rx[2][2]]
//    
//Rx =[ Rx1_1, Rx1_2, Rx1_3]
//    [ Rx2_1, Rx2_2, Rx2_3]
//    [ Rx3_1, Rx3_2, Rx3_3]
// 
//Ry =[ Ry1_1, Ry1_2, Ry1_3]
//    [ Ry2_1, Ry2_2, Ry2_3]
//    [ Ry3_1, Ry3_2, Ry3_3]
// 
//Rz =[ Rz1_1, Rz1_2, Rz1_3]
//    [ Rz2_1, Rz2_2, Rz2_3]
//    [ Rz3_1, Rz3_2, Rz3_3]
 
R ={
    { Rx[0][0]*(Ry[0][0]*Rz[0][0] + Ry[1][0]*Rz[0][1] + Ry[2][0]*Rz[0][2]) + Rx[1][0]*(Ry[0][1]*Rz[0][0] + Ry[1][1]*Rz[0][1] + Ry[2][1]*Rz[0][2]) + Rx[2][0]*(Ry[0][2]*Rz[0][0] + Ry[1][2]*Rz[0][1] + Ry[2][2]*Rz[0][2]), Rx[0][1]*(Ry[0][0]*Rz[0][0] + Ry[1][0]*Rz[0][1] + Ry[2][0]*Rz[0][2]) + Rx[1][1]*(Ry[0][1]*Rz[0][0] + Ry[1][1]*Rz[0][1] + Ry[2][1]*Rz[0][2]) + Rx[2][1]*(Ry[0][2]*Rz[0][0] + Ry[1][2]*Rz[0][1] + Ry[2][2]*Rz[0][2]), Rx[0][2]*(Ry[0][0]*Rz[0][0] + Ry[1][0]*Rz[0][1] + Ry[2][0]*Rz[0][2]) + Rx[1][2]*(Ry[0][1]*Rz[0][0] + Ry[1][1]*Rz[0][1] + Ry[2][1]*Rz[0][2]) + Rx[2][2]*(Ry[0][2]*Rz[0][0] + Ry[1][2]*Rz[0][1] + Ry[2][2]*Rz[0][2])},
    { Rx[0][0]*(Ry[0][0]*Rz[1][0] + Ry[1][0]*Rz[1][1] + Ry[2][0]*Rz[1][2]) + Rx[1][0]*(Ry[0][1]*Rz[1][0] + Ry[1][1]*Rz[1][1] + Ry[2][1]*Rz[1][2]) + Rx[2][0]*(Ry[0][2]*Rz[1][0] + Ry[1][2]*Rz[1][1] + Ry[2][2]*Rz[1][2]), Rx[0][1]*(Ry[0][0]*Rz[1][0] + Ry[1][0]*Rz[1][1] + Ry[2][0]*Rz[1][2]) + Rx[1][1]*(Ry[0][1]*Rz[1][0] + Ry[1][1]*Rz[1][1] + Ry[2][1]*Rz[1][2]) + Rx[2][1]*(Ry[0][2]*Rz[1][0] + Ry[1][2]*Rz[1][1] + Ry[2][2]*Rz[1][2]), Rx[0][2]*(Ry[0][0]*Rz[1][0] + Ry[1][0]*Rz[1][1] + Ry[2][0]*Rz[1][2]) + Rx[1][2]*(Ry[0][1]*Rz[1][0] + Ry[1][1]*Rz[1][1] + Ry[2][1]*Rz[1][2]) + Rx[2][2]*(Ry[0][2]*Rz[1][0] + Ry[1][2]*Rz[1][1] + Ry[2][2]*Rz[1][2])},
    { Rx[0][0]*(Ry[0][0]*Rz[2][0] + Ry[1][0]*Rz[2][1] + Ry[2][0]*Rz[2][2]) + Rx[1][0]*(Ry[0][1]*Rz[2][0] + Ry[1][1]*Rz[2][1] + Ry[2][1]*Rz[2][2]) + Rx[2][0]*(Ry[0][2]*Rz[2][0] + Ry[1][2]*Rz[2][1] + Ry[2][2]*Rz[2][2]), Rx[0][1]*(Ry[0][0]*Rz[2][0] + Ry[1][0]*Rz[2][1] + Ry[2][0]*Rz[2][2]) + Rx[1][1]*(Ry[0][1]*Rz[2][0] + Ry[1][1]*Rz[2][1] + Ry[2][1]*Rz[2][2]) + Rx[2][1]*(Ry[0][2]*Rz[2][0] + Ry[1][2]*Rz[2][1] + Ry[2][2]*Rz[2][2]), Rx[0][2]*(Ry[0][0]*Rz[2][0] + Ry[1][0]*Rz[2][1] + Ry[2][0]*Rz[2][2]) + Rx[1][2]*(Ry[0][1]*Rz[2][0] + Ry[1][1]*Rz[2][1] + Ry[2][1]*Rz[2][2]) + Rx[2][2]*(Ry[0][2]*Rz[2][0] + Ry[1][2]*Rz[2][1] + Ry[2][2]*Rz[2][2])}
  };
// b1 b2 b3  
// R =  [ R1_1, R1_2, R1_3]
//      [ R2_1, R2_2, R2_3]
//      [ R3_1, R3_2, R3_3]
//   b =[ b1, b2, b3]
// Pb1 =[ R1_1*b1 + R2_1*b2 + R3_1*b3, R1_2*b1 + R2_2*b2 + R3_2*b3, R1_3*b1 + R2_3*b2 + R3_3*b3]

  double Pb1[1][3]={(R[0][0]*b1[0]+R[1][0]*b1[1]+R[2][0]*b1[2])+P[0],(R[0][1]*b1[0]+R[1][1]*b1[1]+R[2][1]*b1[2])+P[1],(R[0][2]*b1[0]+R[1][2]*b1[1]+R[2][2]*b1[2])+P[2]};
  double Pb2[1][3]={(R[0][0]*b2[0]+R[1][0]*b2[1]+R[2][0]*b2[2])+P[0],(R[0][1]*b2[0]+R[1][1]*b2[1]+R[2][1]*b2[2])+P[1],(R[0][2]*b2[0]+R[1][2]*b2[1]+R[2][2]*b2[2])+P[2]};
  double Pb3[1][3]={(R[0][0]*b3[0]+R[1][0]*b3[1]+R[2][0]*b3[2])+P[0],(R[0][1]*b3[0]+R[1][1]*b3[1]+R[2][1]*b3[2])+P[1],(R[0][2]*b3[0]+R[1][2]*b3[1]+R[2][2]*b3[2])+P[2]};
  double Pb4[1][3]={(R[0][0]*b4[0]+R[1][0]*b4[1]+R[2][0]*b4[2])+P[0],(R[0][1]*b4[0]+R[1][1]*b4[1]+R[2][1]*b4[2])+P[1],(R[0][2]*b4[0]+R[1][2]*b4[1]+R[2][2]*b4[2])+P[2]};
  double Pb5[1][3]={(R[0][0]*b5[0]+R[1][0]*b5[1]+R[2][0]*b5[2])+P[0],(R[0][1]*b5[0]+R[1][1]*b5[1]+R[2][1]*b5[2])+P[1],(R[0][2]*b5[0]+R[1][2]*b5[1]+R[2][2]*b5[2])+P[2]};
  double Pb6[1][3]={(R[0][0]*b6[0]+R[1][0]*b6[1]+R[2][0]*b6[2])+P[0],(R[0][1]*b6[0]+R[1][1]*b6[1]+R[2][1]*b6[2])+P[1],(R[0][2]*b6[0]+R[1][2]*b6[1]+R[2][2]*b6[2])+P[2]};          
 
   L1=sqrt(pow(Pb1[0][0]-a1[0],2)+pow(Pb1[0][1]-a1[1],2)+pow(Pb1[0][2]-a1[2],2));
   L2=sqrt(pow(Pb2[0][0]-a2[0],2)+pow(Pb2[0][1]-a2[1],2)+pow(Pb2[0][2]-a2[2],2));
   L3=sqrt(pow(Pb3[0][0]-a3[0],2)+pow(Pb3[0][1]-a3[1],2)+pow(Pb3[0][2]-a3[2],2));
   L4=sqrt(pow(Pb4[0][0]-a4[0],2)+pow(Pb4[0][1]-a4[1],2)+pow(Pb4[0][2]-a4[2],2));
   L5=sqrt(pow(Pb5[0][0]-a5[0],2)+pow(Pb5[0][1]-a5[1],2)+pow(Pb5[0][2]-a5[2],2));
   L6=sqrt(pow(Pb6[0][0]-a6[0],2)+pow(Pb6[0][1]-a6[1],2)+pow(Pb6[0][2]-a6[2],2));

   L1 = map(L1, LMIN, LMAX,SERVOMIN, SERVOMAX); //180 to 365
   L2 = map(L2, LMIN, LMAX,SERVOMIN, SERVOMAX);
   L3 = map(L3, LMIN, LMAX,SERVOMIN, SERVOMAX);
   L4 = map(L4, LMIN, LMAX,SERVOMIN, SERVOMAX);
   L5 = map(L5, LMIN, LMAX,SERVOMIN, SERVOMAX);
   L6 = map(L6, LMIN, LMAX,SERVOMIN, SERVOMAX);
   
   setPWM(0, 0, L1);
   setPWM(1, 0, L2);
   setPWM(3, 0, L3);
   setPWM(2, 0, L4); 
   setPWM(4, 0, L5);
   setPWM(5, 0, L6);
   
//   Serial.print(deg2rad(xdeg));
//   Serial.print("  ");
//   Serial.print(deg2rad(ydeg));
//   Serial.print("  ");
//   Serial.print(deg2rad(zdeg));
//   Serial.print("  ");
//   Serial.print(L1);
//   Serial.print("  ");
//   Serial.print(L2);
//   Serial.print("  ");
//   Serial.print(L3);
//   Serial.print("  ");
//   Serial.print(L4);
//   Serial.print("  ");
//   Serial.print(L5);
//   Serial.print("  ");
//   Serial.println(L6);
}
//****************************KINEMATICS END*********************************************//

/***********************************Ininialization***************************************/
double all_lenght[]={};
void setup() {
  Serial.begin(115200);
  Serial.println("16 channel Servo test!");
  Wire.begin();
  reseto();
  setPWMFreq(1000);
  delay(1000);
  setPWMFreq(50.0);
  for(uint8_t num_pin=0; num_pin<16; num_pin++){
      setPWM(num_pin, 0, SERVOMIN);}
      delay(2000);
      
  Yesprogram();
  delay(2000);
  Noprogram();
  delay(2000);
  Nothing();
  delay(2000);
}

/***********************************Main Loop******************************************************/
//#################################################################################################/
void loop() {

     kinematics(deg2rad(xdeg),deg2rad(ydeg),deg2rad(zdeg));  
     
//for(uint8_t counter=0; counter<MOTION_Step; counter++){
//  setPWM(0, 0, SERVOMIN); //%actuator is changed
//  setPWM(1, 0, 220);
//  setPWM(3, 0, SERVOMIN);
//  setPWM(2, 0, 240); 
//  setPWM(4, 0, SERVOMIN);
//  setPWM(5, 0, SERVOMIN); 
//}    
}


uint8_t loop_counter1=0;
uint8_t RotationDeg=0;
void Noprogram()
{  
  for(loop_counter1; loop_counter1<NumofRotation; loop_counter1++)
    {
      for(RotationDeg; RotationDeg<NumofRotation; RotationDeg++) 
      {  
            kinematics(deg2rad(0.00),deg2rad(0),deg2rad(-20));
            delay(1000);
            kinematics(deg2rad(0.00),deg2rad(0.00),deg2rad(20));
            delay(1000);
      }
      kinematics(deg2rad(0),deg2rad(0),deg2rad(0));
     if(loop_counter1>NumofRotation){kinematics(deg2rad(0),deg2rad(0),deg2rad(0)); RotationDeg=0; break;}    
    }
}
uint8_t loop_counter=0;
uint8_t BendingDeg=0;
void Yesprogram()
{  
  for(loop_counter; loop_counter<NumofBending; loop_counter++)
    {
      for(BendingDeg; BendingDeg<NumofBending; BendingDeg++) 
      {  
            kinematics(deg2rad(0.00),deg2rad(25),deg2rad(0.00));
            delay(1000);
            kinematics(deg2rad(0.00),deg2rad(0),deg2rad(0.00));
            delay(1000);
      }
     if(loop_counter>NumofBending){break;BendingDeg=0;}      
    }
}

uint8_t loop_counter2=0;
uint8_t SwingDeg=0;

void Nothing()
{  
  for(loop_counter2; loop_counter2<NumofSwing; loop_counter2++)
    {
      for(SwingDeg; SwingDeg<NumofSwing; SwingDeg++) 
      {  
            kinematics(deg2rad(25),deg2rad(0.00),deg2rad(0.00));
            delay(1000);
            kinematics(deg2rad(-25),deg2rad(0.00),deg2rad(0.00));
            delay(1000);
      }
      kinematics(deg2rad(0),deg2rad(0),deg2rad(0));
     if(loop_counter2>NumofSwing){break;SwingDeg=0;}      
    }
}
//**********************degree to radian and radian to degree conversion******************//
double rad2deg(double radian)
{
  double degree=radian * (180/PI);
  return degree;
}
double deg2rad(double degree)
{
  double radian=degree * (PI/180);
  return radian;
}

//##################################################################################################/

/***********************************Position control function***************************************/
void setPWM(uint8_t num, uint16_t on, uint16_t off) {
  Wire.beginTransmission(NewAddress);
  Wire.write(LED0_ON_L+4*num);
  Wire.write(on);
  Wire.write(on>>8);
  Wire.write(off);
  Wire.write(off>>8);
  Wire.endTransmission();
}
/**************************************************************************/
void setPWMFreq(float freq) {
  freq *= 0.9;  // Correct for overshoot in the frequency setting (see issue #11). //150 min 600max
  float prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
  prescaleval -= 1;

  uint8_t prescale = floor(prescaleval + 0.5);
  uint8_t oldmode = read8(PCA9685_MODE1); // Wire.requestFrom(2, 6);    // request 6 bytes from slave device #2
  uint8_t newmode = (oldmode&0x7F) | 0x10; // sleep

  write8(PCA9685_MODE1, newmode); // go to sleep
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
  write8(PCA9685_MODE1, oldmode);

  delay(5);
  write8(PCA9685_MODE1, oldmode | 0xa0);
}

void reseto() {
  write8(PCA9685_MODE1, 0x80);
  delay(10);
}

uint8_t read8(uint8_t addr) {
  Wire.beginTransmission(NewAddress);
  Wire.write(addr);
  Wire.endTransmission();

  Wire.requestFrom((uint8_t)0x40, (uint8_t)1);
  return Wire.read();
}
void write8(uint8_t addr, uint8_t d) {
  Wire.beginTransmission(NewAddress);
  Wire.write(addr);
  Wire.write(d);
  Wire.endTransmission();
}

void changeAddress(byte oldAddress, byte newAddress)
{
  Wire.beginTransmission(oldAddress);
  Wire.send(0x00);
  Wire.send(0xA0);
  Wire.endTransmission();

  Wire.beginTransmission(oldAddress);
  Wire.send(0x00);
  Wire.send(0xAA);
  Wire.endTransmission();

  Wire.beginTransmission(oldAddress);
  Wire.send(0x00);
  Wire.send(0xA5);
  Wire.endTransmission();

  Wire.beginTransmission(oldAddress);
  Wire.send(0x00);
  Wire.send(newAddress);
  Wire.endTransmission();
}

